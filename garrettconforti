import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Technical analysis libraries (TA-Lib or pandas_ta)
try:
    import talib
except ImportError:
    # Fallback to pandas_ta if talib is not installed
    import pandas_ta as ta

# Attempt to use TradingView data via tvDatafeed; if not available, fallback to yfinance
def get_data(ticker, exchange):
    try:
        from tvDatafeed import TvDatafeed, Interval
        tv = TvDatafeed()  # If needed, pass your TradingView username/password here
        # Fetch 15-minute historical data (here, last 500 bars)
        df = tv.get_hist(symbol=ticker, exchange=exchange, interval=Interval.in_15_minute, n_bars=500)
        df = df.copy()
        print("Using TradingView data.")
    except Exception as e:
        print("Failed to fetch from TradingView, using yfinance as fallback.")
        import yfinance as yf
        # Note: yfinance may not support 15-minute data for all tickers; adjust period as needed.
        df = yf.download(ticker, interval='15m', period='5d')
    # Ensure column names are lowercase and standardized
    df.rename(columns={'Open': 'open', 'High': 'high', 'Low': 'low', 'Close': 'close', 'Volume': 'volume'}, inplace=True)
    return df

def compute_indicators(df):
    # --- SMA (14) on close ---
    try:
        df['SMA14'] = talib.SMA(df['close'], timeperiod=14)
    except Exception:
        df['SMA14'] = df['close'].rolling(window=14).mean()
    
    # --- RSI (14) on close ---
    try:
        df['RSI'] = talib.RSI(df['close'], timeperiod=14)
    except Exception:
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        RS = gain / loss
        df['RSI'] = 100 - (100 / (1 + RS))
    
    # --- Bollinger Bands (default period 20, stddev=2) ---
    try:
        upper, middle, lower = talib.BBANDS(df['close'], timeperiod=20, nbdevup=2, nbdevdn=2, matype=0)
        df['BB_upper'] = upper
        df['BB_middle'] = middle
        df['BB_lower'] = lower
    except Exception:
        df['BB_middle'] = df['close'].rolling(window=20).mean()
        std = df['close'].rolling(window=20).std()
        df['BB_upper'] = df['BB_middle'] + 2 * std
        df['BB_lower'] = df['BB_middle'] - 2 * std

    return df

def calculate_fibonacci_levels(df, lookback=100):
    # Use the most recent 'lookback' bars to compute high and low for Fibonacci retracement
    recent = df[-lookback:]
    high = recent['high'].max()
    low = recent['low'].min()
    diff = high - low
    levels = {
        '0%': high,
        '23.6%': high - 0.236 * diff,
        '38.2%': high - 0.382 * diff,
        '50%': high - 0.5 * diff,
        '61.8%': high - 0.618 * diff,
        '100%': low
    }
    return levels

def analyze_volume_price(df):
    # Compute a simple moving average for volume (14 periods)
    try:
        df['vol_SMA'] = talib.SMA(df['volume'], timeperiod=14)
    except Exception:
        df['vol_SMA'] = df['volume'].rolling(window=14).mean()
    
    # Calculate price percentage change from previous bar
    df['price_change'] = df['close'].pct_change()
    
    # Create a volume/price action signal:
    # +1 if volume > vol_SMA and price increased, -1 if volume > vol_SMA and price decreased, else 0.
    df['vol_price_signal'] = np.where(
        (df['volume'] > df['vol_SMA']) & (df['price_change'] > 0), 1,
        np.where((df['volume'] > df['vol_SMA']) & (df['price_change'] < 0), -1, 0)
    )
    return df

def calculate_percentage_wheel(df, fib_levels):
    """
    Aggregates signals from several indicators into a score from 0 to 100.
    Start at 50 (neutral) and adjust based on:
      - RSI: if < 30 add, if > 70 subtract.
      - SMA: if price above SMA, add; below, subtract.
      - Bollinger Bands: if price near lower band (oversold) add; near upper band (overbought) subtract.
      - Fibonacci: if close near support (e.g. 38.2% or 50% level), add; near resistance (e.g. 23.6%) subtract.
      - Volume/Price action: add/subtract a small amount.
    """
    latest = df.iloc[-1]
    score = 50  # Start neutral
    
    # --- RSI contribution ---
    if latest['RSI'] < 30:
        score += 10
    elif latest['RSI'] > 70:
        score -= 10
    
    # --- SMA contribution ---
    if latest['close'] > latest['SMA14']:
        score += 10
    else:
        score -= 10

    # --- Bollinger Bands contribution ---
    # If the close price is near the lower band, consider it a bullish (oversold) sign.
    if latest['close'] < latest['BB_lower']:
        score += 5
    # If the close price is near the upper band, consider it bearish.
    elif latest['close'] > latest['BB_upper']:
        score -= 5

    # --- Fibonacci Retracement contribution ---
    # Define a tolerance (1% of current close)
    tolerance = 0.01 * latest['close']
    close = latest['close']
    # If price is near common support levels (38.2% or 50%), add to bullish bias.
    if abs(close - fib_levels['38.2%']) < tolerance or abs(close - fib_levels['50%']) < tolerance:
        score += 5
    # If price is near a resistance level (23.6%), subtract (bearish).
    if abs(close - fib_levels['23.6%']) < tolerance:
        score -= 5

    # --- Volume and Price Action contribution ---
    score += latest['vol_price_signal'] * 5

    # Ensure score is within bounds 0-100
    score = max(0, min(100, score))
    return score

def predict_signal(score):
    """
    Based on the aggregated score:
      - Score > 55: Buy signal
      - Score < 45: Sell signal
      - Otherwise: Neutral
    """
    if score > 55:
        return 'Buy'
    elif score < 45:
        return 'Sell'
    else:
        return 'Neutral'

def plot_chart(df, ticker):
    plt.figure(figsize=(12, 6))
    plt.plot(df['close'], label='Close Price')
    plt.plot(df['SMA14'], label='SMA 14', linestyle='--')
    plt.plot(df['BB_upper'], label='BB Upper', linestyle='--')
    plt.plot(df['BB_lower'], label='BB Lower', linestyle='--')
    plt.title(f"{ticker} - 15 Minute Chart Analysis")
    plt.legend()
    plt.show()

def main():
    ticker = input("Enter ticker symbol (e.g., BTCUSDT, AAPL): ").upper()
    exchange = input("Enter exchange (e.g., BINANCE, NASDAQ): ").upper()
    
    # Get 15-minute data
    df = get_data(ticker, exchange)
    
    if df.empty:
        print("No data retrieved. Check ticker/exchange or API credentials.")
        return
    
    # Calculate technical indicators
    df = compute_indicators(df)
    fib_levels = calculate_fibonacci_levels(df, lookback=100)
    df = analyze_volume_price(df)
    
    # Calculate aggregated prediction score (percentage wheel)
    score = calculate_percentage_wheel(df, fib_levels)
    signal = predict_signal(score)
    
    print(f"\nPrediction score: {score}%")
    print(f"Trade signal: {signal}")
    
    # Optionally plot the chart with indicators
    plot_chart(df, ticker)

if __name__ == "__main__":
    main()
